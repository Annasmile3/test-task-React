{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport axios from 'axios';\nvar apiClient = axios.create({\n  baseURL: 'https://simple-blog-api.crew.red',\n  responseType: 'json',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\nexport var createPost = function createPost(newPost) {\n  var response, post, axiosError;\n  return _regeneratorRuntime.async(function createPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(apiClient.post('/posts', newPost));\n\n        case 3:\n          response = _context.sent;\n          post = response.data;\n          return _context.abrupt(\"return\", post);\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n\n          if (!(_context.t0 && _context.t0.response)) {\n            _context.next = 13;\n            break;\n          }\n\n          axiosError = _context.t0;\n          return _context.abrupt(\"return\", axiosError.response.data);\n\n        case 13:\n          throw _context.t0;\n\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[0, 8]], Promise);\n};\nexport var createComment = function createComment(newPComment) {\n  var response, comment;\n  return _regeneratorRuntime.async(function createComment$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return _regeneratorRuntime.awrap(apiClient.post('/posts', newPComment));\n\n        case 3:\n          response = _context2.sent;\n          comment = response.data;\n          return _context2.abrupt(\"return\", comment);\n\n        case 8:\n          _context2.prev = 8;\n          _context2.t0 = _context2[\"catch\"](0);\n\n          if (_context2.t0 && _context2.t0.response) {\n            // const axiosError = err as AxiosError;\n            // return axiosError.response.data;\n            console.log(\"couldn't fetch data\");\n          }\n\n          throw _context2.t0;\n\n        case 12:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, [[0, 8]], Promise);\n};","map":{"version":3,"sources":["D:/test_tasks/test-task-React/client.ts"],"names":["axios","apiClient","create","baseURL","responseType","headers","createPost","newPost","post","response","data","axiosError","createComment","newPComment","comment","console","log"],"mappings":";AAAA,OAAOA,KAAP,MAAkC,OAAlC;AAEA,IAAMC,SAAS,GAAGD,KAAK,CAACE,MAAN,CAAa;AAC7BC,EAAAA,OAAO,EAAE,kCADoB;AAE7BC,EAAAA,YAAY,EAAE,MAFe;AAG7BC,EAAAA,OAAO,EAAE;AACP,oBAAgB;AADT;AAHoB,CAAb,CAAlB;AAQA,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAAOC,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAECN,SAAS,CAACO,IAAV,CAAwB,QAAxB,EAAkCD,OAAlC,CAFD;;AAAA;AAEhBE,UAAAA,QAFgB;AAGhBD,UAAAA,IAHgB,GAGTC,QAAQ,CAACC,IAHA;AAAA,2CAIfF,IAJe;;AAAA;AAAA;AAAA;;AAAA,gBAMlB,eAAO,YAAIC,QANO;AAAA;AAAA;AAAA;;AAOdE,UAAAA,UAPc;AAAA,2CAQbA,UAAU,CAACF,QAAX,CAAoBC,IARP;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAnB;AAeP,OAAO,IAAME,aAAa,GAAG,SAAhBA,aAAgB,CAAOC,WAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAEFZ,SAAS,CAACO,IAAV,CAAwB,QAAxB,EAAkCK,WAAlC,CAFE;;AAAA;AAEnBJ,UAAAA,QAFmB;AAGnBK,UAAAA,OAHmB,GAGTL,QAAQ,CAACC,IAHA;AAAA,4CAIlBI,OAJkB;;AAAA;AAAA;AAAA;;AAMzB,cAAI,gBAAO,aAAIL,QAAf,EAAyB;AACvB;AACA;AACAM,YAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACD;;AAVwB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAtB","sourcesContent":["import axios, { AxiosError } from 'axios';\n\nconst apiClient = axios.create({\n  baseURL: 'https://simple-blog-api.crew.red',\n  responseType: 'json',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\nexport const createPost = async (newPost: Comment) => {\n  try {\n    const response = await apiClient.post<Comment>('/posts', newPost);\n    const post = response.data;\n    return post;\n  } catch (err) {\n    if (err && err.response) {\n      const axiosError = err as AxiosError;\n      return axiosError.response.data;\n    }\n    \n    throw err;\n  }\n};\n\nexport const createComment = async (newPComment: Comment) => {\n  try {\n    const response = await apiClient.post<Comment>('/posts', newPComment);\n    const comment = response.data;\n    return comment;\n  } catch (err) {\n    if (err && err.response) {\n      // const axiosError = err as AxiosError;\n      // return axiosError.response.data;\n      console.log(\"couldn't fetch data\")\n    }\n    \n    throw err;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}