{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"D:\\\\test_tasks\\\\test-task-React\\\\pages\\\\posts\\\\[id].tsx\";\nvar __jsx = React.createElement;\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n  list-style-image: url('https://img.icons8.com/officel/16/000000/user.png');\\n\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n  width: 90%;\\n  padding: 5px 10px;\\n  background-color: #e6e6e6;\\n  border-radius: 15px;\\n  border: none;\\n  outline: none;\\n\\n  .post-photo {\\n    width: 50%;\\n    margin-right: 5%;\\n  }\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  display: flex;\\n  margin: 30px 0 30px 15px;\\n\\n  .post-photo {\\n    width: 50%;\\n    margin-right: 5%;\\n  }\\n\\n  p {\\n    font-family: serif;\\n    color: grey;\\n  }\\n  \\n  form {\\n    position: relative;\\n\\n    button {\\n      position: absolute;\\n      top: 4px;\\n      right: 10%;\\n      background-color: #e6e6e6;\\n      border: none;\\n      outline: none;\\n      cursor: pointer;\\n    }\\n  }\\n\\n  @media (max-width: 768px) {\\n    flex-wrap: wrap;\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState } from 'react';\nimport { nextConnect } from '../../store/index';\nimport { fetchPost, fetchComments, addComment } from '../../actions';\nimport styled from 'styled-components';\nimport Layout from '../../components/MyLayout';\nvar PostDetails = styled.section(_templateObject());\nvar CommentInput = styled.input(_templateObject2());\nvar CommentsList = styled.ul(_templateObject3());\n\nvar Post = function Post(props) {\n  var _useState = useState(''),\n      comment = _useState[0],\n      setComment = _useState[1];\n\n  var _useState2 = useState(props.comments),\n      commentList = _useState2[0],\n      setComments = _useState2[1];\n\n  var handleInputChange = function handleInputChange(_ref) {\n    var target = _ref.target;\n    setComment(target.value);\n  };\n\n  var handleSubmit = function handleSubmit(e) {\n    e.preventDefault();\n\n    if (comment.trim() !== '') {\n      addComment({\n        body: comment,\n        postId: props.post.id\n      });\n      setComment('');\n      setComments([].concat(_toConsumableArray(commentList), [{\n        body: comment,\n        postId: props.post.id\n      }]));\n    }\n  };\n\n  var _props$post = props.post,\n      title = _props$post.title,\n      body = _props$post.body;\n  return __jsx(Layout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, __jsx(PostDetails, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, __jsx(\"img\", {\n    className: \"post-photo\",\n    alt: \"laptop\",\n    src: \"https://images.unsplash.com/photo-1501504905252-473c47e087f8?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=2000&fit=max&ixid=eyJhcHBfaWQiOjExNzczfQ\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }), __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, __jsx(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, title), __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, body), __jsx(\"form\", {\n    onSubmit: handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, __jsx(CommentInput, {\n    type: \"text\",\n    value: comment,\n    placeholder: \"Comment...\",\n    onChange: handleInputChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }), __jsx(\"button\", {\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }, \"Add\")), __jsx(CommentsList, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }, commentList.map(function (item) {\n    return __jsx(\"li\", {\n      key: item.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, item.body);\n  })))));\n};\n\nPost.getInitialProps = function _callee(ctx) {\n  var id, post, comments, filteredcomments;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          id = ctx.query.id;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(ctx.store.dispatch(fetchPost(id)));\n\n        case 3:\n          post = _context.sent;\n          _context.next = 6;\n          return _regeneratorRuntime.awrap(ctx.store.dispatch(fetchComments()));\n\n        case 6:\n          comments = _context.sent;\n          filteredcomments = comments.comments.filter(function (comment) {\n            return comment.postId === +id;\n          });\n          return _context.abrupt(\"return\", {\n            post: post.post,\n            comments: filteredcomments\n          });\n\n        case 9:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexport default nextConnect(function (state) {\n  return state;\n})(Post);","map":{"version":3,"sources":["D:/test_tasks/test-task-React/pages/posts/[id].tsx"],"names":["React","useState","nextConnect","fetchPost","fetchComments","addComment","styled","Layout","PostDetails","section","CommentInput","input","CommentsList","ul","Post","props","comment","setComment","comments","commentList","setComments","handleInputChange","target","value","handleSubmit","e","preventDefault","trim","body","postId","post","id","title","map","item","getInitialProps","ctx","query","store","dispatch","filteredcomments","filter","state"],"mappings":"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","sourcesContent":["import React, { useState, ChangeEvent, FormEvent } from 'react';\nimport { nextConnect } from '../../store/index';\nimport { NextComponentType, NextContext, NextPageContext } from \"next\";\nimport { fetchPost, fetchComments, addComment } from '../../actions';\nimport styled from 'styled-components';\nimport Layout from '../../components/MyLayout';\n\nconst PostDetails = styled.section`\n  display: flex;\n  margin: 30px 0 30px 15px;\n\n  .post-photo {\n    width: 50%;\n    margin-right: 5%;\n  }\n\n  p {\n    font-family: serif;\n    color: grey;\n  }\n  \n  form {\n    position: relative;\n\n    button {\n      position: absolute;\n      top: 4px;\n      right: 10%;\n      background-color: #e6e6e6;\n      border: none;\n      outline: none;\n      cursor: pointer;\n    }\n  }\n\n  @media (max-width: 768px) {\n    flex-wrap: wrap;\n  }\n`;\n\n\nconst CommentInput = styled.input`\n  width: 90%;\n  padding: 5px 10px;\n  background-color: #e6e6e6;\n  border-radius: 15px;\n  border: none;\n  outline: none;\n\n  .post-photo {\n    width: 50%;\n    margin-right: 5%;\n  }\n`;\n\nconst CommentsList = styled.ul`\n  list-style-image: url('https://img.icons8.com/officel/16/000000/user.png');\n`;\n\ninterface Props {\n  post: Post,\n  comments: Comment[]\n}\n\nconst Post = (props: Props) => {\n  const [comment, setComment] = useState('');\n  const [commentList, setComments] = useState(props.comments);\n\n  const handleInputChange = ({ target }: ChangeEvent<HTMLInputElement>) => {\n    setComment(target.value);\n  };\n\n  const handleSubmit = (e: FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    if (comment.trim() !== '') {\n      addComment({ body: comment, postId: props.post.id } as Comment);\n      setComment('');\n      setComments([...commentList, { body: comment, postId: props.post.id }]);\n    }\n  };\n\n  const { post: { title, body } } = props;\n\n  return (\n    <Layout>\n      <PostDetails>\n        <img\n          className=\"post-photo\"\n          alt=\"laptop\"\n          src=\"https://images.unsplash.com/photo-1501504905252-473c47e087f8?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=2000&fit=max&ixid=eyJhcHBfaWQiOjExNzczfQ\"\n        />\n        <div>\n          <h1>{title}</h1>\n          <p>{body}</p>\n          <form onSubmit={handleSubmit}>\n            <CommentInput\n              type=\"text\"\n              value={comment}\n              placeholder=\"Comment...\"\n              onChange={handleInputChange}\n            />\n            <button type=\"submit\">Add</button>\n          </form>\n          <CommentsList>\n            {commentList.map((item: Comment) => (\n              <li key={item.id}>\n                {item.body}\n              </li>\n            ))}\n          </CommentsList>\n        </div>\n      </PostDetails>\n    </Layout>\n  );\n};\n\nPost.getInitialProps = async function (ctx: NextCo) {\n  const { id } = ctx.query;\n  const post = await ctx.store.dispatch(fetchPost(id));\n  const comments = await ctx.store.dispatch(fetchComments());\n  const filteredcomments = comments.comments.filter((comment: Comment) => comment.postId === +id)\n  return {\n    post: post.post,\n    comments: filteredcomments\n  };\n};\nexport default nextConnect((state) => state)(Post)\n"]},"metadata":{},"sourceType":"module"}