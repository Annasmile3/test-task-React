{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport { ADD_POST, FETCH_POSTS, FETCH_COMMENTS } from '../constants/action-types';\nimport { getPosts, getComments, createPost } from '../api/client';\nexport var addPost = function addPost(post) {\n  return function _callee(dispatch) {\n    var newPost, posts;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(createPost(post));\n\n          case 2:\n            newPost = _context.sent;\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(getPosts());\n\n          case 5:\n            posts = _context.sent;\n            posts = [].concat(_toConsumableArray(posts), [newPost]);\n            deb;\n            return _context.abrupt(\"return\", dispatch({\n              type: ADD_POST,\n              posts: posts\n            }));\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var fetchPosts = function fetchPosts() {\n  return function _callee2(dispatch) {\n    var posts;\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(getPosts());\n\n          case 2:\n            posts = _context2.sent;\n            return _context2.abrupt(\"return\", dispatch({\n              type: FETCH_POSTS,\n              posts: posts\n            }));\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var fetchComments = function fetchComments() {\n  return function _callee3(dispatch) {\n    var posts;\n    return _regeneratorRuntime.async(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return _regeneratorRuntime.awrap(getComments());\n\n          case 2:\n            posts = _context3.sent;\n            return _context3.abrupt(\"return\", dispatch({\n              type: FETCH_COMMENTS,\n              posts: posts\n            }));\n\n          case 4:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};","map":{"version":3,"sources":["D:/test_tasks/test-task-React/actions/index.ts"],"names":["ADD_POST","FETCH_POSTS","FETCH_COMMENTS","getPosts","getComments","createPost","addPost","post","dispatch","newPost","posts","deb","type","fetchPosts","fetchComments"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,WAAnB,EAAgCC,cAAhC,QAAmE,2BAAnE;AACA,SAASC,QAAT,EAAmBC,WAAnB,EAAgCC,UAAhC,QAAkD,eAAlD;AAEA,OAAO,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,IAAD;AAAA,SAAU,iBAAOC,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACTH,UAAU,CAACE,IAAD,CADD;;AAAA;AACzBE,YAAAA,OADyB;AAAA;AAAA,6CAEbN,QAAQ,EAFK;;AAAA;AAE3BO,YAAAA,KAF2B;AAG/BA,YAAAA,KAAK,gCAAOA,KAAP,IAAcD,OAAd,EAAL;AACAE,YAAAA,GAAG;AAJ4B,6CAKxBH,QAAQ,CAAC;AAAEI,cAAAA,IAAI,EAAEZ,QAAR;AAAkBU,cAAAA,KAAK,EAALA;AAAlB,aAAD,CALgB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAV;AAAA,CAAhB;AAQP,OAAO,IAAMG,UAAU,GAAG,SAAbA,UAAa;AAAA,SAAM,kBAAOL,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACVL,QAAQ,EADE;;AAAA;AACxBO,YAAAA,KADwB;AAAA,8CAEvBF,QAAQ,CAAC;AAAEI,cAAAA,IAAI,EAAEX,WAAR;AAAqBS,cAAAA,KAAK,EAALA;AAArB,aAAD,CAFe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAN;AAAA,CAAnB;AAKP,OAAO,IAAMI,aAAa,GAAG,SAAhBA,aAAgB;AAAA,SAAM,kBAAON,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACbJ,WAAW,EADE;;AAAA;AAC3BM,YAAAA,KAD2B;AAAA,8CAE1BF,QAAQ,CAAC;AAAEI,cAAAA,IAAI,EAAEV,cAAR;AAAwBQ,cAAAA,KAAK,EAALA;AAAxB,aAAD,CAFkB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAN;AAAA,CAAtB","sourcesContent":["import { ADD_POST, FETCH_POSTS, FETCH_COMMENTS, ADD_COMMENT } from '../constants/action-types';\nimport { getPosts, getComments, createPost } from '../api/client';\n\nexport const addPost = (post) => async (dispatch: any) => {\n  const newPost = await createPost(post);\n  let posts = await getPosts();\n  posts = [...posts, newPost];\n  deb\n  return dispatch({ type: ADD_POST, posts });\n};\n\nexport const fetchPosts = () => async (dispatch: any) => {\n  const posts = await getPosts();\n  return dispatch({ type: FETCH_POSTS, posts });\n};\n\nexport const fetchComments = () => async (dispatch: any) => {\n  const posts = await getComments();\n  return dispatch({ type: FETCH_COMMENTS, posts });\n}"]},"metadata":{},"sourceType":"module"}