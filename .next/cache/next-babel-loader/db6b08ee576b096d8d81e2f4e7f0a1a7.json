{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport axios from 'axios';\nvar apiClient = axios.create({\n  baseURL: 'https://simple-blog-api.crew.red',\n  responseType: 'json',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\nexport var createPost = function createPost(newPost) {\n  var response, post;\n  return _regeneratorRuntime.async(function createPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(apiClient.post('/posts', newPost));\n\n        case 3:\n          response = _context.sent;\n          debugger;\n          post = response.data;\n          return _context.abrupt(\"return\", post);\n\n        case 9:\n          _context.prev = 9;\n          _context.t0 = _context[\"catch\"](0);\n\n          if (_context.t0 && _context.t0.response) {\n            console.log(_context.t0.response.status);\n          }\n\n          throw _context.t0;\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[0, 9]], Promise);\n};\nexport var getPost = function getPost(id) {\n  var response;\n  return _regeneratorRuntime.async(function getPost$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return _regeneratorRuntime.awrap(apiClient.get(\"/posts/\".concat(id, \"?_embed=comments\")));\n\n        case 3:\n          response = _context2.sent;\n          return _context2.abrupt(\"return\", response.data);\n\n        case 7:\n          _context2.prev = 7;\n          _context2.t0 = _context2[\"catch\"](0);\n\n          if (_context2.t0 && _context2.t0.response) {\n            console.log(_context2.t0.response.status);\n          }\n\n          throw _context2.t0;\n\n        case 11:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, [[0, 7]], Promise);\n};\nexport var createComment = function createComment(newComment) {\n  var response, comment;\n  return _regeneratorRuntime.async(function createComment$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return _regeneratorRuntime.awrap(apiClient.post('/comments', newComment));\n\n        case 3:\n          response = _context3.sent;\n          comment = response.data;\n          return _context3.abrupt(\"return\", comment);\n\n        case 8:\n          _context3.prev = 8;\n          _context3.t0 = _context3[\"catch\"](0);\n\n          if (_context3.t0 && _context3.t0.response) {\n            console.log(_context3.t0.response.status);\n          }\n\n          throw _context3.t0;\n\n        case 12:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, [[0, 8]], Promise);\n};","map":{"version":3,"sources":["D:/test_tasks/test-task-React/client.ts"],"names":["axios","apiClient","create","baseURL","responseType","headers","createPost","newPost","post","response","data","console","log","status","getPost","id","get","createComment","newComment","comment"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,IAAMC,SAAS,GAAGD,KAAK,CAACE,MAAN,CAAa;AAC7BC,EAAAA,OAAO,EAAE,kCADoB;AAE7BC,EAAAA,YAAY,EAAE,MAFe;AAG7BC,EAAAA,OAAO,EAAE;AACP,oBAAgB;AADT;AAHoB,CAAb,CAAlB;AAQA,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAAOC,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAECN,SAAS,CAACO,IAAV,CAAqB,QAArB,EAA+BD,OAA/B,CAFD;;AAAA;AAEhBE,UAAAA,QAFgB;AAGtB;AACMD,UAAAA,IAJgB,GAITC,QAAQ,CAACC,IAJA;AAAA,2CAKfF,IALe;;AAAA;AAAA;AAAA;;AAOtB,cAAI,eAAO,YAAIC,QAAf,EAAyB;AACvBE,YAAAA,OAAO,CAACC,GAAR,CAAY,YAAIH,QAAJ,CAAaI,MAAzB;AACD;;AATqB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAnB;AAeP,OAAO,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAAOC,EAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAEId,SAAS,CAACe,GAAV,kBAA8BD,EAA9B,sBAFJ;;AAAA;AAEbN,UAAAA,QAFa;AAAA,4CAGZA,QAAQ,CAACC,IAHG;;AAAA;AAAA;AAAA;;AAKnB,cAAI,gBAAO,aAAID,QAAf,EAAyB;AACvBE,YAAAA,OAAO,CAACC,GAAR,CAAY,aAAIH,QAAJ,CAAaI,MAAzB;AACD;;AAPkB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAhB;AAaP,OAAO,IAAMI,aAAa,GAAG,SAAhBA,aAAgB,CAAOC,UAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAEFjB,SAAS,CAACO,IAAV,CAAwB,WAAxB,EAAqCU,UAArC,CAFE;;AAAA;AAEnBT,UAAAA,QAFmB;AAGnBU,UAAAA,OAHmB,GAGTV,QAAQ,CAACC,IAHA;AAAA,4CAIlBS,OAJkB;;AAAA;AAAA;AAAA;;AAMzB,cAAI,gBAAO,aAAIV,QAAf,EAAyB;AACvBE,YAAAA,OAAO,CAACC,GAAR,CAAY,aAAIH,QAAJ,CAAaI,MAAzB;AACD;;AARwB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAtB","sourcesContent":["import axios from 'axios';\n\nconst apiClient = axios.create({\n  baseURL: 'https://simple-blog-api.crew.red',\n  responseType: 'json',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\nexport const createPost = async (newPost: Post) => {\n  try {\n    const response = await apiClient.post<Post>('/posts', newPost);\n    debugger\n    const post = response.data;\n    return post;\n  } catch (err) {\n    if (err && err.response) {\n      console.log(err.response.status);\n    }\n    \n    throw err;\n  }\n};\n\nexport const getPost = async (id: any) => {\n  try {\n    const response = await apiClient.get<Post>(`/posts/${id}?_embed=comments`);\n    return response.data;\n  } catch (err) {\n    if (err && err.response) {\n      console.log(err.response.status);\n    }\n    \n    throw err;\n  }\n};\n\nexport const createComment = async (newComment: Comment) => {\n  try {\n    const response = await apiClient.post<Comment>('/comments', newComment);\n    const comment = response.data;\n    return comment;\n  } catch (err) {\n    if (err && err.response) {\n      console.log(err.response.status);\n    }\n    \n    throw err;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}