{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { ADD_POST, FETCH_POSTS, FETCH_COMMENTS, ADD_COMMENT } from '../constants/action-types';\nimport { combineReducers } from 'redux';\n\nconst postStore = (state = {\n  posts: []\n}, action) => {\n  switch (action.type) {\n    case ADD_POST:\n      console.log('hi');\n      return Object.assign({}, state, {\n        posts: [...state.posts, action.post]\n      });\n\n    case FETCH_POSTS:\n      return _objectSpread({}, state, {\n        posts: action.posts\n      });\n\n    default:\n      return state;\n  }\n};\n\nconst commentStore = (state = {\n  comments: []\n}, action) => {\n  switch (action.type) {\n    case ADD_COMMENT:\n      return _objectSpread({}, state);\n\n    case FETCH_COMMENTS:\n      return _objectSpread({}, state, {\n        comments: action.comments\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default combineReducers({\n  postStore,\n  commentStore\n});","map":{"version":3,"sources":["D:/test_tasks/test-task-React/reducers/index.ts"],"names":["ADD_POST","FETCH_POSTS","FETCH_COMMENTS","ADD_COMMENT","combineReducers","postStore","state","posts","action","type","console","log","Object","assign","post","commentStore","comments"],"mappings":";;;;;;AAAA,SAASA,QAAT,EAAmBC,WAAnB,EAAgCC,cAAhC,EAAgDC,WAAhD,QAAmE,2BAAnE;AACA,SAASC,eAAT,QAAgC,OAAhC;;AAQA,MAAMC,SAAS,GAAG,CAACC,KAAK,GAAG;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAAT,EAAwBC,MAAxB,KAA+C;AAC/D,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKT,QAAL;AACEU,MAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ;AACA,aAAOC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBP,KAAlB,EAAyB;AAC9BC,QAAAA,KAAK,EAAE,CAAC,GAAGD,KAAK,CAACC,KAAV,EAAiBC,MAAM,CAACM,IAAxB;AADuB,OAAzB,CAAP;;AAGF,SAAKb,WAAL;AACE,+BACKK,KADL;AAEEC,QAAAA,KAAK,EAAEC,MAAM,CAACD;AAFhB;;AAIF;AACE,aAAOD,KAAP;AAZJ;AAcD,CAfD;;AAsBA,MAAMS,YAAY,GAAG,CAACT,KAAK,GAAG;AAAEU,EAAAA,QAAQ,EAAE;AAAZ,CAAT,EAA2BR,MAA3B,KAAqD;AACxE,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKN,WAAL;AACE,+BACKG,KADL;;AAGF,SAAKJ,cAAL;AACE,+BACKI,KADL;AAEEU,QAAAA,QAAQ,EAAER,MAAM,CAACQ;AAFnB;;AAIF;AACE,aAAOV,KAAP;AAXJ;AAaD,CAdD;;AAgBA,eAAeF,eAAe,CAAC;AAC7BC,EAAAA,SAD6B;AAE7BU,EAAAA;AAF6B,CAAD,CAA9B","sourcesContent":["import { ADD_POST, FETCH_POSTS, FETCH_COMMENTS, ADD_COMMENT } from '../constants/action-types';\nimport { combineReducers } from 'redux';\n\ntype ActionPost = {\n  type: string,\n  post: Post,\n  posts: Post[]\n}\n\nconst postStore = (state = { posts: [] }, action: ActionPost) => {\n  switch (action.type) {\n    case ADD_POST:\n      console.log('hi')\n      return Object.assign({}, state, {\n        posts: [...state.posts, action.post]\n      })\n    case FETCH_POSTS:\n      return {\n        ...state,\n        posts: action.posts\n      }\n    default:\n      return state\n  }\n};\n\ntype ActionComment = {\n  type: string,\n  comments: Comment[]\n}\n\nconst commentStore = (state = { comments: [] }, action: ActionComment) => {\n  switch (action.type) {\n    case ADD_COMMENT:\n      return {\n        ...state,\n      }\n    case FETCH_COMMENTS:\n      return {\n        ...state,\n        comments: action.comments\n      }\n    default:\n      return state\n  }\n};\n\nexport default combineReducers({\n  postStore,\n  commentStore\n});"]},"metadata":{},"sourceType":"module"}