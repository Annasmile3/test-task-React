{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { ADD_POST, FETCH_POSTS, FETCH_POST, FETCH_COMMENTS, ADD_COMMENT } from '../constants/action-types';\nimport { getPosts, getPost, getComments, createPost, createComment } from '../api/client';\nexport var fetchPosts = function fetchPosts() {\n  return function _callee(dispatch) {\n    var posts;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(getPosts());\n\n          case 2:\n            posts = _context.sent;\n            return _context.abrupt(\"return\", dispatch({\n              type: FETCH_POSTS,\n              posts: posts\n            }));\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var fetchPost = function fetchPost(postId) {\n  return function _callee2(dispatch) {\n    var post;\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(getPost(postId));\n\n          case 2:\n            post = _context2.sent;\n            return _context2.abrupt(\"return\", dispatch({\n              type: FETCH_POST,\n              post: post\n            }));\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var addPost = function addPost(newPost) {\n  return function _callee3(dispatch) {\n    var post;\n    return _regeneratorRuntime.async(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return _regeneratorRuntime.awrap(createPost(newPost));\n\n          case 2:\n            post = _context3.sent;\n            return _context3.abrupt(\"return\", dispatch({\n              type: ADD_POST,\n              post: post\n            }));\n\n          case 4:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var fetchComments = function fetchComments() {\n  return function _callee4(dispatch) {\n    var comments;\n    return _regeneratorRuntime.async(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.next = 2;\n            return _regeneratorRuntime.awrap(getComments());\n\n          case 2:\n            comments = _context4.sent;\n            return _context4.abrupt(\"return\", dispatch({\n              type: FETCH_COMMENTS,\n              comments: comments\n            }));\n\n          case 4:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var addComment = function addComment(newComment) {\n  return function _callee5(dispatch) {\n    var comment;\n    return _regeneratorRuntime.async(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            _context5.next = 2;\n            return _regeneratorRuntime.awrap(createComment(newComment));\n\n          case 2:\n            comment = _context5.sent;\n            return _context5.abrupt(\"return\", dispatch({\n              type: ADD_COMMENT,\n              comment: comment\n            }));\n\n          case 4:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};","map":{"version":3,"sources":["D:/test_tasks/test-task-React/actions/index.ts"],"names":["ADD_POST","FETCH_POSTS","FETCH_POST","FETCH_COMMENTS","ADD_COMMENT","getPosts","getPost","getComments","createPost","createComment","fetchPosts","dispatch","posts","type","fetchPost","postId","post","addPost","newPost","fetchComments","comments","addComment","newComment","comment"],"mappings":";AAAA,SACEA,QADF,EAEEC,WAFF,EAGEC,UAHF,EAIEC,cAJF,EAKEC,WALF,QAMO,2BANP;AAOA,SACEC,QADF,EAEEC,OAFF,EAGEC,WAHF,EAIEC,UAJF,EAKEC,aALF,QAMO,eANP;AAQA,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa;AAAA,SAAM,iBAAOC,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACVN,QAAQ,EADE;;AAAA;AACxBO,YAAAA,KADwB;AAAA,6CAEvBD,QAAQ,CAAC;AAAEE,cAAAA,IAAI,EAAEZ,WAAR;AAAqBW,cAAAA,KAAK,EAALA;AAArB,aAAD,CAFe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAN;AAAA,CAAnB;AAKP,OAAO,IAAME,SAAS,GAAG,SAAZA,SAAY,CAACC,MAAD;AAAA,SAAoB,kBAAOJ,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACxBL,OAAO,CAACS,MAAD,CADiB;;AAAA;AACrCC,YAAAA,IADqC;AAAA,8CAEpCL,QAAQ,CAAC;AAAEE,cAAAA,IAAI,EAAEX,UAAR;AAAoBc,cAAAA,IAAI,EAAJA;AAApB,aAAD,CAF4B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAApB;AAAA,CAAlB;AAKP,OAAO,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,OAAD;AAAA,SAAmB,kBAAOP,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACrBH,UAAU,CAACU,OAAD,CADW;;AAAA;AAClCF,YAAAA,IADkC;AAAA,8CAGjCL,QAAQ,CAAC;AAAEE,cAAAA,IAAI,EAAEb,QAAR;AAAkBgB,cAAAA,IAAI,EAAJA;AAAlB,aAAD,CAHyB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAnB;AAAA,CAAhB;AAMP,OAAO,IAAMG,aAAa,GAAG,SAAhBA,aAAgB;AAAA,SAAM,kBAAOR,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACVJ,WAAW,EADD;;AAAA;AAC3Ba,YAAAA,QAD2B;AAAA,8CAE1BT,QAAQ,CAAC;AAAEE,cAAAA,IAAI,EAAEV,cAAR;AAAwBiB,cAAAA,QAAQ,EAARA;AAAxB,aAAD,CAFkB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAN;AAAA,CAAtB;AAKP,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,UAAD;AAAA,SAAyB,kBAAOX,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAC3BF,aAAa,CAACa,UAAD,CADc;;AAAA;AAC3CC,YAAAA,OAD2C;AAAA,8CAE1CZ,QAAQ,CAAC;AAAEE,cAAAA,IAAI,EAAET,WAAR;AAAqBmB,cAAAA,OAAO,EAAPA;AAArB,aAAD,CAFkC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAzB;AAAA,CAAnB","sourcesContent":["import {\n  ADD_POST,\n  FETCH_POSTS,\n  FETCH_POST,\n  FETCH_COMMENTS,\n  ADD_COMMENT\n} from '../constants/action-types';\nimport {\n  getPosts,\n  getPost,\n  getComments,\n  createPost,\n  createComment\n} from '../api/client';\n\nexport const fetchPosts = () => async (dispatch) => {\n  const posts = await getPosts();\n  return dispatch({ type: FETCH_POSTS, posts });\n};\n\nexport const fetchPost = (postId: number) => async (dispatch) => {\n  const post = await getPost(postId);\n  return dispatch({ type: FETCH_POST, post });\n};\n\nexport const addPost = (newPost: Post) => async (dispatch: any) => {\n  const post = await createPost(newPost);\n\n  return dispatch({ type: ADD_POST, post });\n};\n\nexport const fetchComments = () => async (dispatch: any) => {\n  const comments = await getComments();\n  return dispatch({ type: FETCH_COMMENTS, comments });\n}\n\nexport const addComment = (newComment: Comment) => async (dispatch: any) => {\n  const comment = await createComment(newComment);\n  return dispatch({ type: ADD_COMMENT, comment });\n};\n"]},"metadata":{},"sourceType":"module"}