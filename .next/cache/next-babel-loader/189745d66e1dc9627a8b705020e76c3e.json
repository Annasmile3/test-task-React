{"ast":null,"code":"var _jsxFileName = \"D:\\\\test_tasks\\\\test-task-React\\\\pages\\\\posts\\\\[id].tsx\";\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport { nextConnect } from '../../store/index';\nimport styled from 'styled-components';\nimport { fetchPost, fetchComments, addComment } from '../../actions';\nimport Layout from '../../components/MyLayout';\nconst PostDetails = styled.section`\n  display: flex;\n  margin: 30px 0 30px 15px;\n\n  .post-photo {\n    width: 50%;\n    margin-right: 5%;\n  }\n\n  p {\n    font-family: serif;\n    color: grey;\n  }\n  \n  form {\n    position: relative;\n\n    button {\n      position: absolute;\n      top: 4px;\n      right: 10%;\n      background-color: #e6e6e6;\n      border: none;\n      outline: none;\n      cursor: pointer;\n    }\n  }\n\n  @media (max-width: 768px) {\n    flex-wrap: wrap;\n  }\n`;\nconst CommentInput = styled.input`\n  width: 90%;\n  padding: 5px 10px;\n  background-color: #e6e6e6;\n  border-radius: 15px;\n  border: none;\n  outline: none;\n\n  .post-photo {\n    width: 50%;\n    margin-right: 5%;\n  }\n`;\nconst CommentsList = styled.ul`\n  list-style-image: url('https://img.icons8.com/officel/16/000000/user.png');\n`;\n;\n\nconst Post = props => {\n  let {\n    comments,\n    post: {\n      title,\n      body\n    }\n  } = props;\n  const {\n    0: comment,\n    1: setComment\n  } = useState('');\n  const {\n    0: commentList,\n    1: setComments\n  } = useState(comments);\n\n  const handleInputChange = ({\n    target\n  }) => {\n    setComment(target.value);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (comment.trim() !== '') {\n      addComment({\n        body: comment,\n        postId: props.post.id\n      });\n      setComment('');\n      setComments([...commentList, {\n        body: comment,\n        postId: props.post.id\n      }]);\n    }\n  };\n\n  return __jsx(Layout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, __jsx(PostDetails, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, __jsx(\"img\", {\n    className: \"post-photo\",\n    alt: \"laptop\",\n    src: \"https://images.unsplash.com/photo-1501504905252-473c47e087f8?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=2000&fit=max&ixid=eyJhcHBfaWQiOjExNzczfQ\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }), __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, __jsx(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, title), __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, body), __jsx(\"form\", {\n    onSubmit: handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, __jsx(CommentInput, {\n    type: \"text\",\n    value: comment,\n    placeholder: \"Comment...\",\n    onChange: handleInputChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }), __jsx(\"button\", {\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, \"Add\")), __jsx(CommentsList, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, commentList.map(item => __jsx(\"li\", {\n    key: item.id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }, item.body))))));\n};\n\nPost.getInitialProps = async function (ctx) {\n  const {\n    id\n  } = ctx.query;\n  const post = await ctx.store.dispatch(fetchPost(id));\n  const comments = await ctx.store.dispatch(fetchComments());\n  const filteredcomments = comments.comments.filter(comment => comment.postId === +id);\n  return {\n    post: post.post,\n    comments: filteredcomments\n  };\n};\n\nexport default nextConnect(state => state)(Post);","map":{"version":3,"sources":["D:/test_tasks/test-task-React/pages/posts/[id].tsx"],"names":["React","useState","nextConnect","styled","fetchPost","fetchComments","addComment","Layout","PostDetails","section","CommentInput","input","CommentsList","ul","Post","props","comments","post","title","body","comment","setComment","commentList","setComments","handleInputChange","target","value","handleSubmit","e","preventDefault","trim","postId","id","map","item","getInitialProps","ctx","query","store","dispatch","filteredcomments","filter","state"],"mappings":"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","sourcesContent":["import React, { useState, ChangeEvent, FormEvent } from 'react';\nimport { nextConnect } from '../../store/index';\nimport styled from 'styled-components';\nimport { fetchPost, fetchComments, addComment } from '../../actions';\nimport Layout from '../../components/MyLayout';\n\nconst PostDetails = styled.section`\n  display: flex;\n  margin: 30px 0 30px 15px;\n\n  .post-photo {\n    width: 50%;\n    margin-right: 5%;\n  }\n\n  p {\n    font-family: serif;\n    color: grey;\n  }\n  \n  form {\n    position: relative;\n\n    button {\n      position: absolute;\n      top: 4px;\n      right: 10%;\n      background-color: #e6e6e6;\n      border: none;\n      outline: none;\n      cursor: pointer;\n    }\n  }\n\n  @media (max-width: 768px) {\n    flex-wrap: wrap;\n  }\n`;\n\nconst CommentInput = styled.input`\n  width: 90%;\n  padding: 5px 10px;\n  background-color: #e6e6e6;\n  border-radius: 15px;\n  border: none;\n  outline: none;\n\n  .post-photo {\n    width: 50%;\n    margin-right: 5%;\n  }\n`;\n\nconst CommentsList = styled.ul`\n  list-style-image: url('https://img.icons8.com/officel/16/000000/user.png');\n`;\n\ninterface Props {\n  post: Post,\n  comments: Comment[],\n};\n\nconst Post = (props: Props) => {\n  let { comments,\n    post: { title, body }\n  } = props;\n  const [comment, setComment] = useState('');\n  const [commentList, setComments] = useState(comments);\n\n  const handleInputChange = ({ target }: ChangeEvent<HTMLInputElement>) => {\n    setComment(target.value);\n  };\n\n  const handleSubmit = (e: FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    if (comment.trim() !== '') {\n      addComment({ body: comment, postId: props.post.id } as Comment);\n      setComment('');\n      setComments([...commentList, { body: comment, postId: props.post.id }] as Comment[]);\n    }\n  };\n\n  return (\n    <Layout>\n      <PostDetails>\n        <img\n          className=\"post-photo\"\n          alt=\"laptop\"\n          src=\"https://images.unsplash.com/photo-1501504905252-473c47e087f8?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=2000&fit=max&ixid=eyJhcHBfaWQiOjExNzczfQ\"\n        />\n        <div>\n          <h1>{title}</h1>\n          <p>{body}</p>\n          <form onSubmit={handleSubmit}>\n            <CommentInput\n              type=\"text\"\n              value={comment}\n              placeholder=\"Comment...\"\n              onChange={handleInputChange}\n            />\n            <button type=\"submit\">Add</button>\n          </form>\n          <CommentsList>\n            {commentList.map((item: Comment) => (\n              <li key={item.id}>{item.body}</li>\n            ))}\n          </CommentsList>\n        </div>\n      </PostDetails>\n    </Layout>\n  );\n};\n\nPost.getInitialProps = async function (ctx) {\n  const { id } = ctx.query;\n  const post = await ctx.store.dispatch(fetchPost(id));\n  const comments = await ctx.store.dispatch(fetchComments());\n  const filteredcomments = comments.comments.filter((comment: Comment) => comment.postId === +id)\n  return {\n    post: post.post,\n    comments: filteredcomments,\n  };\n};\n\nexport default nextConnect((state) => state)(Post)\n"]},"metadata":{},"sourceType":"module"}