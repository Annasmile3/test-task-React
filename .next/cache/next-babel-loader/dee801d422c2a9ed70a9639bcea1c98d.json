{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { ADD_POST, FETCH_POSTS, FETCH_POST, FETCH_COMMENTS } from '../constants/action-types';\nimport { getPosts, getPost, getComments, createPost, createComment } from '../api/client';\nexport var addPost = function addPost(newPost) {\n  return function _callee(dispatch) {\n    var post;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(createPost(newPost));\n\n          case 2:\n            post = _context.sent;\n            return _context.abrupt(\"return\", dispatch({\n              type: ADD_POST,\n              post: post\n            }));\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var fetchPosts = function fetchPosts() {\n  return function _callee2(dispatch) {\n    var posts;\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(getPosts());\n\n          case 2:\n            posts = _context2.sent;\n            return _context2.abrupt(\"return\", dispatch({\n              type: FETCH_POSTS,\n              posts: posts\n            }));\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var fetchPost = function fetchPost(postId) {\n  return function _callee3(dispatch) {\n    var post;\n    return _regeneratorRuntime.async(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return _regeneratorRuntime.awrap(getPost(postId));\n\n          case 2:\n            post = _context3.sent;\n            return _context3.abrupt(\"return\", dispatch({\n              type: FETCH_POST,\n              post: post\n            }));\n\n          case 4:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var fetchComments = function fetchComments() {\n  return function _callee4(dispatch) {\n    var comments;\n    return _regeneratorRuntime.async(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.next = 2;\n            return _regeneratorRuntime.awrap(getComments());\n\n          case 2:\n            comments = _context4.sent;\n            return _context4.abrupt(\"return\", dispatch({\n              type: FETCH_COMMENTS,\n              comments: comments\n            }));\n\n          case 4:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var addComment = function addComment(newComment) {\n  return function _callee5(dispatch) {\n    var post;\n    return _regeneratorRuntime.async(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            _context5.next = 2;\n            return _regeneratorRuntime.awrap(createComment(newComment));\n\n          case 2:\n            post = _context5.sent;\n            return _context5.abrupt(\"return\", dispatch({\n              type: ADD_POST,\n              post: post\n            }));\n\n          case 4:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};","map":{"version":3,"sources":["D:/test_tasks/test-task-React/actions/index.ts"],"names":["ADD_POST","FETCH_POSTS","FETCH_POST","FETCH_COMMENTS","getPosts","getPost","getComments","createPost","createComment","addPost","newPost","dispatch","post","type","fetchPosts","posts","fetchPost","postId","fetchComments","comments","addComment","newComment"],"mappings":";AAAA,SAASA,QAAT,EAAmBC,WAAnB,EAAgCC,UAAhC,EAA4CC,cAA5C,QAA+E,2BAA/E;AACA,SAASC,QAAT,EAAmBC,OAAnB,EAA4BC,WAA5B,EAAyCC,UAAzC,EAAqDC,aAArD,QAA0E,eAA1E;AAEA,OAAO,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,OAAD;AAAA,SAAa,iBAAOC,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACfJ,UAAU,CAACG,OAAD,CADK;;AAAA;AAC5BE,YAAAA,IAD4B;AAAA,6CAE3BD,QAAQ,CAAC;AAAEE,cAAAA,IAAI,EAAEb,QAAR;AAAkBY,cAAAA,IAAI,EAAJA;AAAlB,aAAD,CAFmB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAb;AAAA,CAAhB;AAKP,OAAO,IAAME,UAAU,GAAG,SAAbA,UAAa;AAAA,SAAM,kBAAOH,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACVP,QAAQ,EADE;;AAAA;AACxBW,YAAAA,KADwB;AAAA,8CAEvBJ,QAAQ,CAAC;AAAEE,cAAAA,IAAI,EAAEZ,WAAR;AAAqBc,cAAAA,KAAK,EAALA;AAArB,aAAD,CAFe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAN;AAAA,CAAnB;AAKP,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACC,MAAD;AAAA,SAAY,kBAAON,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAChBN,OAAO,CAACY,MAAD,CADS;;AAAA;AAC7BL,YAAAA,IAD6B;AAAA,8CAE5BD,QAAQ,CAAC;AAAEE,cAAAA,IAAI,EAAEX,UAAR;AAAoBU,cAAAA,IAAI,EAAJA;AAApB,aAAD,CAFoB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAZ;AAAA,CAAlB;AAKP,OAAO,IAAMM,aAAa,GAAG,SAAhBA,aAAgB;AAAA,SAAM,kBAAOP,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACVL,WAAW,EADD;;AAAA;AAC3Ba,YAAAA,QAD2B;AAAA,8CAE1BR,QAAQ,CAAC;AAAEE,cAAAA,IAAI,EAAEV,cAAR;AAAwBgB,cAAAA,QAAQ,EAARA;AAAxB,aAAD,CAFkB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAN;AAAA,CAAtB;AAKP,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,UAAD;AAAA,SAAgB,kBAAOV,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACrBH,aAAa,CAACa,UAAD,CADQ;;AAAA;AAClCT,YAAAA,IADkC;AAAA,8CAEjCD,QAAQ,CAAC;AAAEE,cAAAA,IAAI,EAAEb,QAAR;AAAkBY,cAAAA,IAAI,EAAJA;AAAlB,aAAD,CAFyB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAhB;AAAA,CAAnB","sourcesContent":["import { ADD_POST, FETCH_POSTS, FETCH_POST, FETCH_COMMENTS, ADD_COMMENT } from '../constants/action-types';\nimport { getPosts, getPost, getComments, createPost, createComment } from '../api/client';\n\nexport const addPost = (newPost) => async (dispatch: any) => {\n  const post = await createPost(newPost);\n  return dispatch({ type: ADD_POST, post });\n};\n\nexport const fetchPosts = () => async (dispatch: any) => {\n  const posts = await getPosts();\n  return dispatch({ type: FETCH_POSTS, posts });\n};\n\nexport const fetchPost = (postId) => async (dispatch: any) => {\n  const post = await getPost(postId);\n  return dispatch({ type: FETCH_POST, post });\n};\n\nexport const fetchComments = () => async (dispatch: any) => {\n  const comments = await getComments();\n  return dispatch({ type: FETCH_COMMENTS, comments });\n}\n\nexport const addComment = (newComment) => async (dispatch: any) => {\n  const post = await createComment(newComment);\n  return dispatch({ type: ADD_POST, post });\n};"]},"metadata":{},"sourceType":"module"}