{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { ADD_POST, FETCH_POSTS, FETCH_COMMENTS, ADD_COMMENT } from '../constants/action-types';\nimport { combineReducers } from 'redux';\n\nvar postStore = function postStore() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    posts: []\n  };\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case ADD_POST:\n      return Object.assign({}, state, {\n        posts: [{\n          title: action.title,\n          completed: false,\n          id: getId(state)\n        }].concat(_toConsumableArray(state.todos))\n      });\n\n    case FETCH_POSTS:\n      return _objectSpread({}, state, {\n        posts: action.posts\n      });\n\n    default:\n      return state;\n  }\n};\n\nvar commentStore = function commentStore() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    comments: []\n  };\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case ADD_COMMENT:\n      return _objectSpread({}, state);\n\n    case FETCH_COMMENTS:\n      return _objectSpread({}, state, {\n        comments: action.comments\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default combineReducers({\n  postStore: postStore,\n  commentStore: commentStore\n});","map":{"version":3,"sources":["D:/test_tasks/test-task-React/reducers/index.ts"],"names":["ADD_POST","FETCH_POSTS","FETCH_COMMENTS","ADD_COMMENT","combineReducers","postStore","state","posts","action","type","Object","assign","title","completed","id","getId","todos","commentStore","comments"],"mappings":";;;;;;;AAAA,SAASA,QAAT,EAAmBC,WAAnB,EAAgCC,cAAhC,EAAgDC,WAAhD,QAAmE,2BAAnE;AACA,SAASC,eAAT,QAAgC,OAAhC;;AAQA,IAAMC,SAAS,GAAG,SAAZA,SAAY,GAA+C;AAAA,MAA9CC,KAA8C,uEAAtC;AAAEC,IAAAA,KAAK,EAAE;AAAT,GAAsC;AAAA,MAAvBC,MAAuB;;AAC/D,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKT,QAAL;AACE,aAAOU,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBL,KAAlB,EAAyB;AAC9BC,QAAAA,KAAK,GAAG;AACNK,UAAAA,KAAK,EAAEJ,MAAM,CAACI,KADR;AAENC,UAAAA,SAAS,EAAE,KAFL;AAGNC,UAAAA,EAAE,EAAEC,KAAK,CAACT,KAAD;AAHH,SAAH,4BAICA,KAAK,CAACU,KAJP;AADyB,OAAzB,CAAP;;AAOF,SAAKf,WAAL;AACE,+BACKK,KADL;AAEEC,QAAAA,KAAK,EAAEC,MAAM,CAACD;AAFhB;;AAIF;AACE,aAAOD,KAAP;AAfJ;AAiBD,CAlBD;;AAyBA,IAAMW,YAAY,GAAG,SAAfA,YAAe,GAAqD;AAAA,MAApDX,KAAoD,uEAA5C;AAAEY,IAAAA,QAAQ,EAAE;AAAZ,GAA4C;AAAA,MAA1BV,MAA0B;;AACxE,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKN,WAAL;AACE,+BACKG,KADL;;AAGF,SAAKJ,cAAL;AACE,+BACKI,KADL;AAEEY,QAAAA,QAAQ,EAAEV,MAAM,CAACU;AAFnB;;AAIF;AACE,aAAOZ,KAAP;AAXJ;AAaD,CAdD;;AAgBA,eAAeF,eAAe,CAAC;AAC7BC,EAAAA,SAAS,EAATA,SAD6B;AAE7BY,EAAAA,YAAY,EAAZA;AAF6B,CAAD,CAA9B","sourcesContent":["import { ADD_POST, FETCH_POSTS, FETCH_COMMENTS, ADD_COMMENT } from '../constants/action-types';\nimport { combineReducers } from 'redux';\n\ntype ActionPost = {\n  type: string,\n  post: Post,\n  posts: Post[]\n}\n\nconst postStore = (state = { posts: [] }, action: ActionPost) => {\n  switch (action.type) {\n    case ADD_POST:\n      return Object.assign({}, state, {\n        posts: [{\n          title: action.title,\n          completed: false,\n          id: getId(state)\n        }, ...state.todos]\n      })\n    case FETCH_POSTS:\n      return {\n        ...state,\n        posts: action.posts\n      }\n    default:\n      return state\n  }\n};\n\ntype ActionComment = {\n  type: string,\n  comments: Comment[]\n}\n\nconst commentStore = (state = { comments: [] }, action: ActionComment) => {\n  switch (action.type) {\n    case ADD_COMMENT:\n      return {\n        ...state,\n      }\n    case FETCH_COMMENTS:\n      return {\n        ...state,\n        comments: action.comments\n      }\n    default:\n      return state\n  }\n};\n\nexport default combineReducers({\n  postStore,\n  commentStore\n});"]},"metadata":{},"sourceType":"module"}